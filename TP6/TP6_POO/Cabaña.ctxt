#BlueJ class context
comment0.target=Caba\u00F1a
comment0.text=\r\n\ Clase\ Caba\u00F1a\ calcula\ el\ costo\ de\ una\ caba\u00F1a\ y\ cuenta\ las\ caba\u00F1as\ y\ liquida\r\n\ \r\n\ @author\ Valenzuela\ Luciano\ Juan\ Ignacio\ \r\n
comment1.params=p_nombre\ p_precio\ p_diasAlq\ p_nroHabitaciones
comment1.target=Caba\u00F1a(java.lang.String,\ double,\ int,\ int)
comment1.text=\r\n\ Constructor\ sobrecargado\r\n\ @param\ String\ nombre,\ double\ precio,\ int\ diasAlq,\ int\ nroHabitaciones\r\n
comment2.params=p_nombre\ p_precio\ p_diasAlq\ p_servicios\ p_nroHabitaciones
comment2.target=Caba\u00F1a(java.lang.String,\ double,\ int,\ java.util.ArrayList,\ int)
comment2.text=\r\n\ Constructor\r\n\ @param\ String\ nombre,\ double\ precio,\ int\ diasAlq,\ ArrayList\ servicios,\ int\ nroHabitaciones\r\n
comment3.params=p_nroHabitaciones
comment3.target=void\ setHabitaciones(int)
comment3.text=\r\n\ Setters\r\n
comment4.params=
comment4.target=int\ getHabitaciones()
comment4.text=\r\n\ Getters\r\n
comment5.params=
comment5.target=double\ costo()
comment5.text=\r\n\ Calcula\ el\ costo\ de\ una\ caba\u00F1a,\ suma\ el\ costo\ de\ un\ alojamiento\ (envia\ un\ mensaje\ al\ metodo\ costo\ de\ la\ clase\ padre)\ suma\ el\ adicional\r\n\ y\ luego\ multiplica\ por\ la\ cantidad\ de\ dias\ de\ alquiler.\r\n\ @return\ costo\ adicional\r\n
comment6.params=p_alojamiento
comment6.target=int\ contar(java.lang.String)
comment6.text=\r\n\ Creamos\ una\ variable\ booleana\ que\ sera\ igual\ al\ nombre\ del\ alojamiento\ en\ minusculas\ y\ mandamos\ un\ mensaje\ al\ metodo\ contains\ y\ le\ pasamos\r\n\ el\ string\ caba\u00F1a.\ Luego\ hacemos\ una\ verificion,\ si\ contiene\ es\ true\ entonces\ devolvera\ 1\ (Significa\ que\ encontro\ un\ alojamiento\ con\ el\ nombre\r\n\ de\ caba\u00F1a),\ si\ es\ false\ devolvera\ 0.\r\n\ @param\ String\ alojamiento\r\n\ return\ 1\ o\ 0\r\n
comment7.params=
comment7.target=void\ liquidar()
numComments=8
